# GJS doesn't know about exports, it just exports everything
[export1]
match="export function"
rewrite="function"

[export2]
match="export var"
rewrite="var"

[export3]
match="export const"
rewrite="var"

[export4]
match="export class :[[classname]]"
rewrite="var :[[classname]] = class :[[classname]]"

# Typescript generates this sometimes, especially when using class decorators
# We can just remove it since it will also have generated a `let` declaration above it.
[deleteExport]
match="export { :[[_]] };"
rewrite=""

# Replace our typechecked imports with what GJS uses
# Rewrites `import * as Name from 'Name';` to `const { Name } = imports.gi;`
[giImports]
match='import * as :[name] from ":[source~Clutter|Cogl|Gdk|Gio|GLib|GnomeDesktop|GObject|Gtk|Meta|Shell|Soup|St]";'
rewrite="const { :[name] } = imports.gi;"
rule="where :[name] == :[source]"

# Same thing, but enclosing the import in 'single quotes'
[giImports-singlequote]
match="import * as :[name] from ':[source~Clutter|Cogl|Gdk|Gio|GLib|GnomeDesktop|GObject|Gtk|Meta|Shell|Soup|St]';"
rewrite="const { :[name] } = imports.gi;"
rule="where :[name] == :[source]"

[gjsImports]
match = 'import { :[imports] } from "Gjs";'
rewrite="const { :[imports] } = imports;"

[gjsImports-singlequote]
match = "import { :[imports] } from 'Gjs';"
rewrite="const { :[imports] } = imports;"

[gjsImports2]
match = 'import * as Gjs from "Gjs";'
rewrite="const { Gjs } = imports;"

[gjsImports2-singlequote]
match = "import * as Gjs from 'Gjs';"
rewrite="const { Gjs } = imports;"

# Replace `import * as Something from 'a/b/c` with `const Something = Me.imports.a.b.c`
[imports1]
match='import * as :[[name]] from "src/:[source]";'
rewrite="const :[[name]] = Me.imports.src.:[source];"
rule='where rewrite :[source] { ":[~/]" -> "." }'

[imports1-singlequote]
match="import * as :[[name]] from 'src/:[source]';"
rewrite="const :[[name]] = Me.imports.src.:[source];"
rule='where rewrite :[source] { ":[~/]" -> "." }'

# Replace `import { Something, Else } from 'src/a/b/c` with `const { Something, Else } = Me.imports.src.a.b.c`
[imports2]
match='import { :[imports] } from "src/:[source]";'
rewrite="const { :[imports] } = Me.imports.src.:[source];"
rule='where rewrite :[source] { ":[~/]" -> "." }'

[imports2-singlequote]
match="import { :[imports] } from 'src/:[source]';"
rewrite="const { :[imports] } = Me.imports.src.:[source];"
rule='where rewrite :[source] { ":[~/]" -> "." }'


# When a class has been decorated with @registerGObjectClass we want to change its constructor to be an _init function instead
# because that's what GJS recommends. Typescript however likes constructors a lot more for typechecking purposes
# so we do this hack after the compilation process. Essentially it renames the constructor to _init.
# The compiled code will look like
# ```
# let TestClass = (() => {
#     let TestClass = class TestClass extends ... {
#         constructor(params) {
#             super(params);
#             this.my_field = false;
#             log("Constructor: " + params.testparam);
#         }
#         ...
#     };
    
#     TestClass = __decorate([
#         registerGObjectClass
#     ], TestClass);
#     return TestClass;
# })();
# ```
# so we match against that pattern and try to rename the constructor.
#
# In the process we also change `let MyClass = ...` to `var MyClass = `. GJS seems to think that `let` is not correct when it comes to classes.
# However typescript outputs it...
#
# In the constructor we will always have a `super(...)` call (this is enforced by typescript).
# We have to replace this with `super._init(...)` since we just renamed the constructor to _init
[decorator]
match="""
let :[[classname1]] = (() => {
    let :[[classname2]] = class :[[classname3]] :[1] {
        constructor(:[2])...{:[3]super(:[4]);:[5]}:[6]};
    :[7] = __decorate([
        registerGObjectClass
    ], :[8]);
    :[9]
})"""
rewrite="""
var :[[classname1]] = (() => {
    let :[[classname2]] = class :[[classname3]] :[1] {
        _init(:[2]) {
            :[3]
            super._init(:[4]);
            :[5]
        }
        :[6]
    };
    :[7] = __decorate([
        registerGObjectClass
    ], :[8]);
    :[9]
})"""
